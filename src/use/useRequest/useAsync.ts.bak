import debounce from 'lodash.debounce';
import throttle from 'lodash.throttle';
import { onMounted, watchEffect, ref, onUnmounted, watch } from 'vue';
import {
  noop,
  Subscribe,
  // OptionsWithFormat,
  // BaseResult,
  // BaseOptions,
  Service,
  // Options,
  Fetches,
  FetchConfig,
  FetchResult,
} from './types';
import { isDocumentVisible } from './utils';
import subscribeVisible from './utils/windowVisible';

const DEFAULT_KEY = 'AHOOKS_USE_REQUEST_DEFAULT_KEY';

class Fetch<R, P extends any[]> {
  config: FetchConfig<R, P>;

  service: Service<R, P>;

  // 请求时序
  count = 0;

  // 是否卸载
  unmountedFlag = false;

  // visible 后，是否继续轮询
  pollingWhenVisibleFlag = false;

  pollingTimer: any = undefined; // 轮询定时器

  loadingDelayTimer: any = undefined; // 延迟变更loading状态定时器

  subscribe: Subscribe<R, P>;

  unsubscribe: noop[] = [];

  that: any = this;

  state: FetchResult<R, P> = {
    loading: false,
    params: [] as any,
    data: undefined,
    error: undefined,
    run: this.run.bind(this.that),
    mutate: this.mutate.bind(this.that),
    refresh: this.refresh.bind(this.that),
    cancel: this.cancel.bind(this.that),
    unmount: this.unmount.bind(this.that),
  };
  debounceRun: any;

  throttleRun: any;

  constructor(
    service: Service<R, P>,
    config: FetchConfig<R, P>,
    subscribe: Subscribe<R, P>,
    initState?: { data?: any; error?: any; params?: any; loading?: any },
  ) {
    this.service = service;
    this.config = config;
    this.subscribe = subscribe;
    if (initState) {
      this.state = {
        ...this.state,
        ...initState,
      };
    }

    this.debounceRun = this.config.debounceInterval
      ? debounce(this._run, this.config.debounceInterval)
      : undefined;
    this.throttleRun = this.config.throttleInterval
      ? throttle(this._run, this.config.throttleInterval)
      : undefined;
    if (this.config.pollingInterval) {
      // subscribeVisible(this.rePolling.bind(this));
      this.unsubscribe.push(subscribeVisible(this.rePolling.bind(this)));
    }
  }

  // 简化设置状态
  setState(s = {}) {
    this.state = {
      ...this.state,
      ...s,
    };
  }

  _run(...args: P) {
    // 取消已有定时器
    if (this.pollingTimer) {
      clearTimeout(this.pollingTimer);
    }
    // 取消 loadingDelayTimer
    if (this.loadingDelayTimer) {
      clearTimeout(this.loadingDelayTimer);
    }
    this.count += 1;
    // 闭包存储当次请求的 count
    const currentCount = this.count;

    this.setState({
      loading: !this.config.loadingDelay, // 没有设置loadingDelay，默认立马loading
      params: args,
    });

    if (this.config.loadingDelay) {
      this.loadingDelayTimer = setTimeout(() => {
        this.setState({ loading: true });
      }, this.config.loadingDelay);
    }

    return this.service(...args)
      .then(res => {
        // 挂在并请求次数一样 TODO
        if (!this.unmountedFlag && currentCount === this.count) {
          // 请求结束清除定时器
          if (this.loadingDelayTimer) {
            clearTimeout(this.loadingDelayTimer);
          }
          const formattedResult = this.config.formatResult ? this.config.formatResult(res) : res;
          this.setState({
            data: formattedResult,
            error: undefined,
            loading: false,
          });
          if (this.config.onSuccess) {
            this.config.onSuccess(formattedResult, args);
          }
          return formattedResult;
        }
      })
      .catch(error => {
        if (!this.unmountedFlag && currentCount === this.count) {
          if (this.loadingDelayTimer) {
            clearTimeout(this.loadingDelayTimer);
          }
          this.setState({
            data: undefined,
            error,
            loading: false,
          });
          if (this.config.onError) {
            this.config.onError(error, args);
          }
          // If throwOnError, user should catch the error self,
          // or the page will crash
          if (this.config.throwOnError) {
            throw error;
          }
          console.error(error);
          return Promise.reject(
            'useRequest has caught the exception, if you need to handle the exception yourself, you can set options.throwOnError to true.',
          );
        }
      })
      .finally(() => {
        if (!this.unmountedFlag && currentCount === this.count) {
          if (this.config.pollingInterval) {
            // 如果屏幕隐藏，并且 !pollingWhenHidden, 则停止轮询，并记录 flag，等 visible 时，继续轮询
            if (!isDocumentVisible() && !this.config.pollingWhenHidden) {
              this.pollingWhenVisibleFlag = true;
              return;
            }
            // 轮询开始
            this.pollingTimer = setTimeout(() => {
              this._run(...args);
            }, this.config.pollingInterval);
          }
        }
      });
  }

  run(...args: P) {
    if (this.debounceRun) {
      this.debounceRun(...args);
      // TODO 如果 options 存在 debounceInterval，或 throttleInterval，则 run 和 refresh 不会返回 Promise。 带类型需要修复后，此处变成 return;。
      return Promise.resolve(null as any);
    }
    if (this.throttleRun) {
      this.throttleRun(...args);
      return Promise.resolve(null as any);
    }
    return this._run(...args);
  }
  // 只是重置部分状态
  cancel() {
    if (this.debounceRun) {
      this.debounceRun.cancel();
    }
    if (this.throttleRun) {
      this.throttleRun.cancel();
    }
    if (this.loadingDelayTimer) {
      clearTimeout(this.loadingDelayTimer);
    }
    if (this.pollingTimer) {
      clearTimeout(this.pollingTimer);
    }
    this.pollingWhenVisibleFlag = false;

    this.count += 1;
    this.setState({
      loading: false,
    });
  }

  refresh() {
    return this.run(...this.state.params);
  }
  // 重新轮询
  rePolling() {
    if (this.pollingWhenVisibleFlag) {
      this.pollingWhenVisibleFlag = false;
      this.refresh();
    }
  }

  mutate(data: any) {
    if (typeof data === 'function') {
      this.setState({
        data: data(this.state.data) || {},
      });
    } else {
      this.setState({
        data,
      });
    }
  }

  unmount() {
    this.unmountedFlag = true;
    this.cancel();
    // this.unsubscribe.forEach(s => {
    //   s();
    // });
  }
}
function useAsync(service: any, options: any) {
  const _options = options || {};
  const {
    refreshDeps = [],
    manual = false,
    onSuccess = () => {},
    onError = () => {},

    defaultLoading = false,
    loadingDelay,

    pollingInterval = 0,
    pollingWhenHidden = true,

    defaultParams = [],
    refreshOnWindowFocus = false,
    focusTimespan = 5000,
    fetchKey,
    cacheKey,
    cacheTime = 5 * 60 * 1000,
    staleTime = 0,
    debounceInterval,
    throttleInterval,
    initialData,
    ready = true,
    throwOnError = false,
  } = _options;

  let newstFetchKey = DEFAULT_KEY;

  let formatResult: any;

  //   格式化结果
  if ('formatResult' in _options) {
    formatResult = _options.formatResult;
  }

  const config = {
    formatResult,
    onSuccess,
    onError,
    loadingDelay,
    pollingInterval,
    pollingWhenHidden,
    refreshOnWindowFocus,
    focusTimespan,
    debounceInterval,
    throttleInterval,
    throwOnError,
  };

  const fetches = ref<Fetches<any, any>>({});
  const subscribe = ((key: string, data: any) => {
    fetches.value[key] = data;
  }) as any;
  let readyMemoryParams: any;

  const run = (...args: any) => {
    if (!ready) {
      // 没有 ready, 记录请求参数，等 ready 后，发起请求用
      readyMemoryParams = args;
      return;
    }

    if (fetchKey) {
      const key = fetchKey(...args);
      newstFetchKey = key === undefined ? DEFAULT_KEY : key;
    }
    const currentFetchKey = newstFetchKey;
    let currentFetch = fetches.value[currentFetchKey];
    if (!currentFetch) {
      const newFetch = new Fetch(service, config, subscribe.bind(null, currentFetchKey), {
        data: initialData,
      });
      currentFetch = newFetch.state;
      console.log('currentFetch', currentFetch, currentFetchKey);
      fetches.value[currentFetchKey] = currentFetch;
    }
    return currentFetch.run(...args);
  };

  // for ready
  let hasTriggeredByReady = false;
  watchEffect(() => {
    if (ready) {
      if (!hasTriggeredByReady && readyMemoryParams) {
        run(...readyMemoryParams);
      }
      hasTriggeredByReady = true;
    }
  });

  // 第一次默认执行
  onMounted(() => {
    if (!manual) {
      // 第一次默认执行，可以通过 defaultParams 设置参数
      run(...(defaultParams as any));
    }
  });

  const reset = () => {
    Object.values(fetches).forEach(f => {
      f.unmount();
    });
    newstFetchKey = DEFAULT_KEY;
    fetches.value = {};
  };

  watch(
    () => refreshDeps,
    () => {
      Object.values(fetches).forEach(f => {
        f.refresh();
      });
    },
  );

  onUnmounted(() => {
    Object.values(fetches).forEach(f => {
      f.unmount();
    });
  });

  const notExecutedWarning = (name: string) => () => {
    console.warn(`You should't call ${name} when service not executed once.`);
  };

  return {
    // @ts-ignore
    loading: (ready && !manual) || defaultLoading,
    // @ts-ignore
    data: initialData,
    error: undefined,
    // @ts-ignore
    params: [],
    // @ts-ignore
    cancel: notExecutedWarning('cancel'),
    // @ts-ignore
    refresh: notExecutedWarning('refresh'),
    // @ts-ignore
    mutate: notExecutedWarning('mutate'),
    ...(fetches.value[newstFetchKey] || {}),
    run,
    fetches,
    reset,
  };
}

export default useAsync;
